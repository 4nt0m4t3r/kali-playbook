---
- name: Configure Kali Box
  hosts: localhost
  vars:
    user: kali
  connection: local
  tasks:
    - name: Update and upgrade apt packages
      become: true
      apt:
        upgrade: no
        update_cache: yes
        cache_valid_time: 86400

    - name: Changing perm of /opt
      become: true
      file: dest=/opt mode=a+rwx

    - name: Install xclip
      become: true
      ansible.builtin.apt:
        name: xclip
        state: latest

    - name: Install nodejs
      become: true
      ansible.builtin.apt:
        name: 
        - npm
        - nodejs
        state: latest

    - name: Install snap
      become: true
      ansible.builtin.apt:
        name: snapd
        state: latest
        
    - name: enable service snapd 
      become: true
      systemd:
        name: snapd
        enabled: yes
        state: started

    - name: Check if oh-my-zsh already exists
      command: ls ~/.oh-my-zsh/
      register: file_exists
      ignore_errors: yes

    - name: Download oh-my-zsh installer
      get_url: 
        url: https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh 
        dest: /tmp/zsh-installer.sh
      when: file_exists is failed

    - name: Changing perm of "/tmp/zsh-installer.sh", adding "+x"
      file: dest=/tmp/zsh-installer.sh mode=a+x
      when: file_exists is failed
    
    - name: Execute the zsh-installer.sh
      shell: /tmp/zsh-installer.sh --unattended
      when: file_exists is failed

    - name: Remove the zsh-installer.sh
      file: 
        path: /tmp/zsh-installer.sh 
        state: absent
      when: file_exists is failed

    - name: Copy oh my zsh configuration
      command: cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
      when: file_exists is failed

    - name: Install autosuggestions plugin
      command: git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      when: file_exists is failed

    - name: Check if autosuggestions plugin already added
      command: grep -c zsh-autosuggestions ~/.zshrc
      register: autosuggestions_exists
      ignore_errors: yes

    - name: Add autosuggestions plugin to zshrc
      replace:
          path: ~/.zshrc
          regexp: 'plugins=\('
          replace: 'plugins=(zsh-autosuggestions '
      when: autosuggestions_exists.stdout == '0'

    - name: Change theme
      ansible.builtin.shell: sed -iE 's/^ZSH_THEME=\".*\"/ZSH_THEME=\"alanpeabody\"/' ~/.zshrc
      when: file_exists is failed

    - name: Check if oh-my-tmux already exists
      command: ls ~/.tmux/
      register: oh_my_tmux_file_exists
      ignore_errors: yes

    - name: Install oh my tmux
      shell: git clone https://github.com/gpakosz/.tmux.git ~/.tmux && ln -s -f ~/.tmux/.tmux.conf ~ && cp ~/.tmux/.tmux.conf.local ~
      when: oh_my_tmux_file_exists is failed

    - name: Replace a line in tmux conf to display ip addresses
      ansible.builtin.lineinfile:
        path: ~/.tmux.conf.local
        regexp: '^tmux_conf_theme_status_right.*$'
        line: tmux_conf_theme_status_right=" \#{prefix}#{pairing}#{synchronized}, \#(ip addr show tun0 | grep -m 1 inet | awk '{print $2}' | cut -d / -f 1) , \#{?battery_status, \#{battery_status},}\#{?battery_bar, \#{battery_bar},}#{?battery_percentage, \#{battery_percentage},} , %R , %d %b | \#{username}#{root} | \#{hostname} "
      when: oh_my_tmux_file_exists is failed

    - name: Install kde
      become: true
      ansible.builtin.apt:
        name: kali-desktop-kde
        state: latest

    - name: Update alternatives
      become: true
      command: update-alternatives --set x-session-manager /usr/bin/startplasma-x11 

    - name: Remove xfce
      become: true
      ansible.builtin.apt:
        name: kali-desktop-xfce
        autoremove: yes
        purge: yes

    - name: Install Cool Retro Term
      become: true
      ansible.builtin.apt:
        name: cool-retro-term
        state: latest

    - name: Install neofetch
      become: true
      ansible.builtin.apt:
        name: neofetch
        state: latest
    
    - name: Check if banner already exists
      command: ls ~/banner
      register: banner_file_exists
      ignore_errors: yes

    - name: Create banner
      shell: echo 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKIEBAQEBAQCAgIEBAQCAgQEBAICBAQEBAQEBAICAKQEBAQEBAQEAgIEBAQEAgQEBAICBAQEBAQEBAICAKQEAhICBAQEAgIEBAIUAhQEBAICAgIEBAISAgICAKIUAhICBAIUAgICFAISFAIUAhICAgICFAISAgICAKQCFAIUAhQCEgIEAhQCAhIUAhICAgIEAhISAgICAKISEhQCEhISEgICFAISAgISEhICAgICEhISAgICAKISE6ICAhISEgICEhOiAgISEhICAgICEhOiAgICAKOiE6ICAhOiEgIDohOiAgITohICAgIDohOiAgICAKOjogICA6OjogICA6OiAgIDo6ICAgICA6OiAgICAKIDogICA6IDogIDo6ICAgIDogICAgICA6ICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK' | base64 -d > ~/banner
      when: banner_file_exists is failed

    - name: Add neofetch to zshrc
      shell: echo "neofetch --source ~/banner --color_blocks off" >> ~/.zshrc
      when: banner_file_exists is failed

    - name: Check if bloodhound already exists
      command: ls /opt/bloodhound
      register: bloodhound_exists
      ignore_errors: yes

    - name: Install bloodhound
      shell: git clone  https://github.com/BloodHoundAD/BloodHound.git /opt/bloodhound 
      when: bloodhound_exists is failed

    - name: Install bloodhound packages
      npm:
        path: /opt/bloodhound 
      when: bloodhound_exists is failed

    - name: Install neo4j
      become: true
      ansible.builtin.apt:
        name: neo4j
        state: latest

    - name: Run build bloodhound
      args:
        chdir: /opt/bloodhound 
        creates: /opt/bloodhound /node_modules
      command: npm run build:linux
      when: bloodhound_exists is failed

    - name: Install seclists
      become: true
      ansible.builtin.apt:
        name: seclists
        state: latest

    - name: Install docker
      become: true
      ansible.builtin.apt:
        name: docker.io
        state: latest

    - name: enable service docker 
      become: true
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Append docker group to user
      user:
        name: '{{ user }}'
        groups: docker
        append: yes
      become: true

    - name: Install gobuster
      become: true
      ansible.builtin.apt:
        name: gobuster
        state: latest

    - name: Install golang
      become: true
      ansible.builtin.apt:
        name: golang
        state: latest
    
    - name: Test for line
      shell: grep -c "export GOROOT=" ~/.zshrc
      register: golang_path_flag
      ignore_errors: yes

    - name: Add golang path to zshrc
      ignore_errors: yes
      lineinfile:
        dest: ~/.zshrc
        line: "export GOROOT=/usr/lib/go && export GOPATH=$HOME/go && export PATH=$GOPATH/bin:$GOROOT/bin:$PATH"
      when: golang_path_flag.stdout == "0"

    - name: Install httpx
      shell: go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest

    - name: Install waybackurls
      shell: go install github.com/tomnomnom/waybackurls@latest


    - name: Check if reconftw exists
      command: ls /opt/reconftw
      register: reconftw_exists
      ignore_errors: yes

    - name: Clone reconftw
      command: git clone https://github.com/six2dez/reconftw /opt/reconftw
      when: reconftw_exists is failed


    - name: Install reconftw
      when: reconftw_exists is failed
      ansible.builtin.shell: ./install.sh
      args:
        chdir: /opt/reconftw/

    - name: Install fff
      shell: go get -u github.com/tomnomnom/fff 

    - name: Install EyeWitness
      become: true
      ansible.builtin.apt:
        name: eyewitness
        state: latest

    - name: Install sublist3r
      become: true
      ansible.builtin.apt:
        name: sublist3r
        state: latest

    - name: Check if linkfinder exists
      command: ls /opt/linkfinder
      register: linkfinder_exists
      ignore_errors: yes

    - name: Clone linkfinder
      command: git clone https://github.com/GerbenJavado/LinkFinder.git /opt/linkfinder
      when: linkfinder_exists is failed

    # - name: Install linkfinder
    #   become: true
    #   when: linkfinder_exists is failed
    #   ansible.builtin.shell: python setup.py install
    #   args:
    #     chdir: /opt/linkfinder/

      